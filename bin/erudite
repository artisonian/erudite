#!/usr/bin/env node
'use strict';
var fs = require('fs');

var argv = require('minimist')(process.argv.slice(2), {
  boolean: ['jsx', 'stdout']
});
var erudite = require('..');

var usage = [
  'Usage: erudite [options] /path/to/filename',
  '',
  '  -h, --help     show this help text',
  '  -o, --outfile  write to the given file path',
  '      --preset   Babel preset to use (can be repeated)',
  '  -e, --stage    ECMAScript proposal stage (0-4)',
  '      --stdout   write to stdout (ignores --outfile)'
  '',
  'When specifying presets for Babel, these will need to be installed so they',
  'can be loaded.'
].join('\n') + '\n\n';

var filename = argv._[0];
var outfile = argv.o || argv.outfile;
var help = argv.h || argv.help;

if (help) {
  process.stdout.write(usage);
  process.exit(0);
}

if (!fs.existsSync(filename)) {
  process.stderr.write(usage);
  process.exit(1);
}

var presets = argv.preset || []; // presets must be installed in the calling
                                 // environment, so do not enforce any
if ('string' === typeof presets) presets = [presets];
var opts = { presets: presets };
// note that -e or --stage may be specified as 0, hence need to test for undef
var stage_preset = argv.e === undefined ? argv.stage : argv.e;
if (stage_preset !== undefined) opts.presets.push('stage-' + stage_preset);
var src = erudite.parse(fs.readFileSync(filename, 'utf8'), opts);

if (argv.stdout) {
  return process.stdout.write(src);
}

if (outfile) {
  return fs.writeFileSync(outfile, src, 'utf8');
}

erudite.exec(src, {
  filename: filename
});
